(* SDE2: Christopher Brant
		 ECE 3520 Spring 2018
		 Due April 10th, 2018
		 Compile: # use "sde2.caml";;

	Allowable pre-written Ocaml modules:
	List.hd
	List.tl
	List.nth
	List.length
	List.append
	String.length
	String.get
	String.concat
	Char.code
*)

(* get_table_value_cell ([i;j],table) follows this comment section*)
(* val get_table_values_cell : int list * 'a list list -> 'a list = <fun> *)
let get_table_values_cell ([i;j],table) =
	match ([i;j],table) with
	([],[]) -> []
	| ([],_) -> []
	| (_,[]) -> []
	| ([i;j],table) -> (List.nth (List.nth table (j-1)) (i-1));;

(* cell_products [cell1;cell2]  will be at the bottom of this section *)
(* val cell_products : string list list -> string list = <fun> *)

(* the two functions prior to cell_products are used in the finding of cell_products *)
let rec iterate_list([list_head;cell2],return_list) = 
	match ([list_head;cell2],return_list) with
	([],_) -> []
	| (_::[],_) -> []
	| ([_;[]],return_list) -> return_list
	| ([list_head;cell2],return_list) -> iterate_list ([list_head;(List.tl cell2)], (List.append return_list (((List.nth list_head 0)^(List.nth cell2 0)) :: [])));;

let rec second_cell ([cell1;cell2],return_list) = 
	match ([cell1;cell2],return_list) with
	([],_) -> []
	| (_::[],_) -> []
	| (_::_::_::_,_) -> []
	| ([[];_],return_list) -> return_list
	| ([cell1;cell2],return_list) -> second_cell ([(List.tl cell1);cell2],(iterate_list ([cell1;cell2],return_list)));;

(* cell_products [cell1;cell2] directly below *)
let cell_products [cell1;cell2] =
	match [cell1;cell2] with
	[] -> []
	| [[];_] -> []
	| [_;[]] -> []
	| [cell1;cell2] -> second_cell ([cell1;cell2],[]);;

(* form_row1_cell (element,productions) *)
(* val form_row1_cell : 'a * 'a list list -> 'a list = <fun> *)

(* the function prior to form_row1_cell is used in the finding of form_row1_cell *)
let member_check (element,prod) = 
	match (element,prod) with
	(_,[]) -> []
	| (element,prod) -> if element = (List.nth prod 1)
									then (List.hd prod) :: []
							  else [];;

(* form_row1_cell (element,productions) *)
let rec form_row1_cell (element,productions) =
	match (element,productions) with
	(_,[]) -> []
	| (element,productions) -> List.append (member_check (element,(List.hd productions))) (form_row1_cell (element,(List.tl productions)));;

(* equiv (ca,cb) will be at the bottom of this section *)
(* val equiv : 'a list * 'a list -> bool = <fun> *)

(* the functions prior to equiv are used in the finding of equiv *)
let rec member (ca,cb) =
	match (ca,cb) with 
	([],[]) -> true
	| ([],_) -> false
	| (_,[]) -> false
	| (ca,cb) -> if (List.hd ca) = (List.hd cb)
					then true
				 else member (ca,(List.tl cb));;

let rec cell_equiv_list (ca,cb,original_list) =
	match (ca,cb,original_list) with
	([],[],_) -> true
	| (_,[],_) -> false
	| ([],_,_) -> if (List.length cb) = (List.length original_list)
				  then true
				  else false
	| (ca,cb,original_list) -> if member (ca,cb)
							   		then cell_equiv_list ((List.tl ca),cb,original_list)
							   else false;;

(* equiv (ca,cb) *)
let equiv (ca,cb) = 
	match (ca,cb) with
	([],[]) -> true
	| ([],_) -> false
	| (_,[]) -> false
	| (ca,cb) -> if (List.length ca) = (List.length cb)
				 	then cell_equiv_list(ca,cb,ca)
				 else false;;

(* row_equivalent (rowA,rowB) *)
(* val row_equivalent : 'a list list * 'a list list -> bool = <fun> *)
let rec row_equivalent (rowA,rowB) =
	match (rowA,rowB) with
	([],[]) -> true
	| ([],_) -> false
	| (_,[]) -> false
	| (rowA,rowB) -> if equiv ((List.hd rowA),(List.hd rowB))
					 	then row_equivalent ((List.tl rowA),(List.tl rowB))
					 else false;;

(* table_equivalent (tableA,tableB) *)
(* val table_equivlent : 'a list list list * 'a list list list -> bool = <fun> *)
let rec table_equivalent (tableA,tableB) = 
	match (tableA,tableB) with
	([],[]) -> true
	| ([],_) -> false
	| (_,[]) -> false
	| (tableA,tableB) -> if row_equivalent ((List.hd tableA),(List.hd tableB))
							then table_equivalent ((List.tl tableA),(List.tl tableB))
						else false;;

(* valid_production production will be at the bottom of this section *)
(* val valid_production : string list -> bool = <fun> *)

(* the functions prior to valid_production are used in the finding of valid_production *)
let rec s_prodCheck (index,production) =
	match (index,production) with
	(index,production) -> if index = (String.length production)
							then true
						  else if (String.length production) < 2
						  			then false
						  	   else if (Char.code (String.get production index)) <= 90 && (Char.code (String.get production index)) >= 65
						  	   			then s_prodCheck((index+1),production)
						  	   		else false;;

let non_s_prodCheck (index,production) =
	match (index,production) with
	(index,production) -> if (String.length production) != 1
								then false
							else if (Char.code (String.get production index)) <= 122 && (Char.code (String.get production index)) >= 97
									then true
								 else false;;

let valid_production production = 
	match production with
	[] -> false
	| production -> if (List.length production) = 2
						then if (Char.code (String.get (List.hd production) 0)) = 83
								then s_prodCheck (0,(List.nth production 1))
							 	else if (Char.code (String.get (List.hd production) 0)) <= 90 && (Char.code (String.get (List.hd production) 0)) >= 65
							 			then non_s_prodCheck (0,(List.nth production 1))
							 			else false
					else false;;

(* valid_production_list productionList will be at the bottom of this section *)
(* val valid_production_list : string list list -> bool = <fun> *)
let rec valid_production_list productionList = 
	match productionList with
	[] -> true
	| productionList -> if valid_production (List.hd productionList)
							then valid_production_list (List.tl productionList)
						else false;;


